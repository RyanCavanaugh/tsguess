declare class lodash {
    constructor(...args: any[]);
    add(...args: any[]): any;
    after(...args: any[]): any;
    ary(...args: any[]): any;
    assign(...args: any[]): any;
    assignIn(...args: any[]): any;
    assignInWith(...args: any[]): any;
    assignWith(...args: any[]): any;
    at(...args: any[]): any;
    attempt(...args: any[]): any;
    before(...args: any[]): any;
    bind(...args: any[]): any;
    bindAll(...args: any[]): any;
    bindKey(...args: any[]): any;
    camelCase(...args: any[]): any;
    capitalize(...args: any[]): any;
    castArray(...args: any[]): any;
    ceil(...args: any[]): any;
    chain(): any;
    chunk(...args: any[]): any;
    clamp(...args: any[]): any;
    clone(...args: any[]): any;
    cloneDeep(...args: any[]): any;
    cloneDeepWith(...args: any[]): any;
    cloneWith(...args: any[]): any;
    commit(): any;
    compact(...args: any[]): any;
    concat(...args: any[]): any;
    cond(...args: any[]): any;
    conforms(...args: any[]): any;
    conformsTo(...args: any[]): any;
    constant(...args: any[]): any;
    countBy(...args: any[]): any;
    create(...args: any[]): any;
    curry(...args: any[]): any;
    curryRight(...args: any[]): any;
    debounce(...args: any[]): any;
    deburr(...args: any[]): any;
    defaultTo(...args: any[]): any;
    defaults(...args: any[]): any;
    defaultsDeep(...args: any[]): any;
    defer(...args: any[]): any;
    delay(...args: any[]): any;
    difference(...args: any[]): any;
    differenceBy(...args: any[]): any;
    differenceWith(...args: any[]): any;
    divide(...args: any[]): any;
    drop(...args: any[]): any;
    dropRight(...args: any[]): any;
    dropRightWhile(...args: any[]): any;
    dropWhile(...args: any[]): any;
    each(...args: any[]): any;
    eachRight(...args: any[]): any;
    endsWith(...args: any[]): any;
    entries(...args: any[]): any;
    entriesIn(...args: any[]): any;
    eq(...args: any[]): any;
    escape(...args: any[]): any;
    escapeRegExp(...args: any[]): any;
    every(...args: any[]): any;
    extend(...args: any[]): any;
    extendWith(...args: any[]): any;
    fill(...args: any[]): any;
    filter(...args: any[]): any;
    find(...args: any[]): any;
    findIndex(...args: any[]): any;
    findKey(...args: any[]): any;
    findLast(...args: any[]): any;
    findLastIndex(...args: any[]): any;
    findLastKey(...args: any[]): any;
    first(...args: any[]): any;
    flatMap(...args: any[]): any;
    flatMapDeep(...args: any[]): any;
    flatMapDepth(...args: any[]): any;
    flatten(...args: any[]): any;
    flattenDeep(...args: any[]): any;
    flattenDepth(...args: any[]): any;
    flip(...args: any[]): any;
    floor(...args: any[]): any;
    flow(...args: any[]): any;
    flowRight(...args: any[]): any;
    forEach(...args: any[]): any;
    forEachRight(...args: any[]): any;
    forIn(...args: any[]): any;
    forInRight(...args: any[]): any;
    forOwn(...args: any[]): any;
    forOwnRight(...args: any[]): any;
    fromPairs(...args: any[]): any;
    functions(...args: any[]): any;
    functionsIn(...args: any[]): any;
    get(...args: any[]): any;
    groupBy(...args: any[]): any;
    gt(...args: any[]): any;
    gte(...args: any[]): any;
    has(...args: any[]): any;
    hasIn(...args: any[]): any;
    head(...args: any[]): any;
    identity(...args: any[]): any;
    inRange(...args: any[]): any;
    includes(...args: any[]): any;
    indexOf(...args: any[]): any;
    initial(...args: any[]): any;
    intersection(...args: any[]): any;
    intersectionBy(...args: any[]): any;
    intersectionWith(...args: any[]): any;
    invert(...args: any[]): any;
    invertBy(...args: any[]): any;
    invoke(...args: any[]): any;
    invokeMap(...args: any[]): any;
    isArguments(...args: any[]): any;
    isArray(...args: any[]): any;
    isArrayBuffer(...args: any[]): any;
    isArrayLike(...args: any[]): any;
    isArrayLikeObject(...args: any[]): any;
    isBoolean(...args: any[]): any;
    isBuffer(...args: any[]): any;
    isDate(...args: any[]): any;
    isElement(...args: any[]): any;
    isEmpty(...args: any[]): any;
    isEqual(...args: any[]): any;
    isEqualWith(...args: any[]): any;
    isError(...args: any[]): any;
    isFinite(...args: any[]): any;
    isFunction(...args: any[]): any;
    isInteger(...args: any[]): any;
    isLength(...args: any[]): any;
    isMap(...args: any[]): any;
    isMatch(...args: any[]): any;
    isMatchWith(...args: any[]): any;
    isNaN(...args: any[]): any;
    isNative(...args: any[]): any;
    isNil(...args: any[]): any;
    isNull(...args: any[]): any;
    isNumber(...args: any[]): any;
    isObject(...args: any[]): any;
    isObjectLike(...args: any[]): any;
    isPlainObject(...args: any[]): any;
    isRegExp(...args: any[]): any;
    isSafeInteger(...args: any[]): any;
    isSet(...args: any[]): any;
    isString(...args: any[]): any;
    isSymbol(...args: any[]): any;
    isTypedArray(...args: any[]): any;
    isUndefined(...args: any[]): any;
    isWeakMap(...args: any[]): any;
    isWeakSet(...args: any[]): any;
    iteratee(...args: any[]): any;
    join(...args: any[]): any;
    kebabCase(...args: any[]): any;
    keyBy(...args: any[]): any;
    keys(...args: any[]): any;
    keysIn(...args: any[]): any;
    last(...args: any[]): any;
    lastIndexOf(...args: any[]): any;
    lowerCase(...args: any[]): any;
    lowerFirst(...args: any[]): any;
    lt(...args: any[]): any;
    lte(...args: any[]): any;
    map(...args: any[]): any;
    mapKeys(...args: any[]): any;
    mapValues(...args: any[]): any;
    matches(...args: any[]): any;
    matchesProperty(...args: any[]): any;
    max(...args: any[]): any;
    maxBy(...args: any[]): any;
    mean(...args: any[]): any;
    meanBy(...args: any[]): any;
    memoize(...args: any[]): any;
    merge(...args: any[]): any;
    mergeWith(...args: any[]): any;
    method(...args: any[]): any;
    methodOf(...args: any[]): any;
    min(...args: any[]): any;
    minBy(...args: any[]): any;
    mixin(...args: any[]): any;
    multiply(...args: any[]): any;
    negate(...args: any[]): any;
    next(): any;
    noConflict(...args: any[]): any;
    noop(...args: any[]): any;
    now(...args: any[]): any;
    nth(...args: any[]): any;
    nthArg(...args: any[]): any;
    omit(...args: any[]): any;
    omitBy(...args: any[]): any;
    once(...args: any[]): any;
    orderBy(...args: any[]): any;
    over(...args: any[]): any;
    overArgs(...args: any[]): any;
    overEvery(...args: any[]): any;
    overSome(...args: any[]): any;
    pad(...args: any[]): any;
    padEnd(...args: any[]): any;
    padStart(...args: any[]): any;
    parseInt(...args: any[]): any;
    partial(...args: any[]): any;
    partialRight(...args: any[]): any;
    partition(...args: any[]): any;
    pick(...args: any[]): any;
    pickBy(...args: any[]): any;
    plant(value: any): any;
    pop(...args: any[]): any;
    property(...args: any[]): any;
    propertyOf(...args: any[]): any;
    pull(...args: any[]): any;
    pullAll(...args: any[]): any;
    pullAllBy(...args: any[]): any;
    pullAllWith(...args: any[]): any;
    pullAt(...args: any[]): any;
    push(...args: any[]): any;
    random(...args: any[]): any;
    range(...args: any[]): any;
    rangeRight(...args: any[]): any;
    rearg(...args: any[]): any;
    reduce(...args: any[]): any;
    reduceRight(...args: any[]): any;
    reject(...args: any[]): any;
    remove(...args: any[]): any;
    repeat(...args: any[]): any;
    replace(...args: any[]): any;
    rest(...args: any[]): any;
    result(...args: any[]): any;
    reverse(): any;
    round(...args: any[]): any;
    runInContext(...args: any[]): any;
    sample(...args: any[]): any;
    sampleSize(...args: any[]): any;
    set(...args: any[]): any;
    setWith(...args: any[]): any;
    shift(...args: any[]): any;
    shuffle(...args: any[]): any;
    size(...args: any[]): any;
    slice(...args: any[]): any;
    snakeCase(...args: any[]): any;
    some(...args: any[]): any;
    sort(...args: any[]): any;
    sortBy(...args: any[]): any;
    sortedIndex(...args: any[]): any;
    sortedIndexBy(...args: any[]): any;
    sortedIndexOf(...args: any[]): any;
    sortedLastIndex(...args: any[]): any;
    sortedLastIndexBy(...args: any[]): any;
    sortedLastIndexOf(...args: any[]): any;
    sortedUniq(...args: any[]): any;
    sortedUniqBy(...args: any[]): any;
    splice(...args: any[]): any;
    split(...args: any[]): any;
    spread(...args: any[]): any;
    startCase(...args: any[]): any;
    startsWith(...args: any[]): any;
    stubArray(...args: any[]): any;
    stubFalse(...args: any[]): any;
    stubObject(...args: any[]): any;
    stubString(...args: any[]): any;
    stubTrue(...args: any[]): any;
    subtract(...args: any[]): any;
    sum(...args: any[]): any;
    sumBy(...args: any[]): any;
    tail(...args: any[]): any;
    take(...args: any[]): any;
    takeRight(...args: any[]): any;
    takeRightWhile(...args: any[]): any;
    takeWhile(...args: any[]): any;
    tap(...args: any[]): any;
    template(...args: any[]): any;
    throttle(...args: any[]): any;
    thru(...args: any[]): any;
    times(...args: any[]): any;
    toArray(...args: any[]): any;
    toFinite(...args: any[]): any;
    toInteger(...args: any[]): any;
    toJSON(): any;
    toLength(...args: any[]): any;
    toLower(...args: any[]): any;
    toNumber(...args: any[]): any;
    toPairs(...args: any[]): any;
    toPairsIn(...args: any[]): any;
    toPath(...args: any[]): any;
    toPlainObject(...args: any[]): any;
    toSafeInteger(...args: any[]): any;
    toString(...args: any[]): any;
    toUpper(...args: any[]): any;
    transform(...args: any[]): any;
    trim(...args: any[]): any;
    trimEnd(...args: any[]): any;
    trimStart(...args: any[]): any;
    truncate(...args: any[]): any;
    unary(...args: any[]): any;
    unescape(...args: any[]): any;
    union(...args: any[]): any;
    unionBy(...args: any[]): any;
    unionWith(...args: any[]): any;
    uniq(...args: any[]): any;
    uniqBy(...args: any[]): any;
    uniqWith(...args: any[]): any;
    uniqueId(...args: any[]): any;
    unset(...args: any[]): any;
    unshift(...args: any[]): any;
    unzip(...args: any[]): any;
    unzipWith(...args: any[]): any;
    update(...args: any[]): any;
    updateWith(...args: any[]): any;
    upperCase(...args: any[]): any;
    upperFirst(...args: any[]): any;
    value(): any;
    valueOf(): any;
    values(...args: any[]): any;
    valuesIn(...args: any[]): any;
    without(...args: any[]): any;
    words(...args: any[]): any;
    wrap(...args: any[]): any;
    xor(...args: any[]): any;
    xorBy(...args: any[]): any;
    xorWith(...args: any[]): any;
    zip(...args: any[]): any;
    zipObject(...args: any[]): any;
    zipObjectDeep(...args: any[]): any;
    zipWith(...args: any[]): any;
}

declare namespace lodash {
    const VERSION: string;
    function add(value: any, other: any): any;
    function after(n: any, func: any, ...args: any[]): any;
    function ary(func: any, n: any, guard: any): any;
    function assign(...args: any[]): any;
    function assignIn(...args: any[]): any;
    function assignInWith(...args: any[]): any;
    function assignWith(...args: any[]): any;
    function at(...args: any[]): any;
    function attempt(...args: any[]): any;
    function before(n: any, func: any, ...args: any[]): any;
    function bind(...args: any[]): any;
    function bindAll(...args: any[]): any;
    function bindKey(...args: any[]): any;
    function camelCase(string: any): any;
    function capitalize(string: any): any;
    function castArray(...args: any[]): any;
    function ceil(number: any, precision: any): any;
    function chain(value: any): any;
    function chunk(array: any, size: any, guard: any): any;
    function clamp(number: any, lower: any, upper: any): any;
    function clone(value: any): any;
    function cloneDeep(value: any): any;
    function cloneDeepWith(value: any, customizer: any): any;
    function cloneWith(value: any, customizer: any): any;
    function compact(array: any): any;
    function concat(...args: any[]): any;
    function cond(pairs: any): any;
    function conforms(source: any): any;
    function conformsTo(object: any, source: any): any;
    function constant(value: any): any;
    function countBy(collection: any, iteratee: any): any;
    function create(prototype: any, properties: any): any;
    function curry(func: any, arity: any, guard: any): any;
    function curryRight(func: any, arity: any, guard: any): any;
    function debounce(func: any, wait: any, options: any, ...args: any[]): any;
    function deburr(string: any): any;
    function defaultTo(value: any, defaultValue: any): any;
    function defaults(...args: any[]): any;
    function defaultsDeep(...args: any[]): any;
    function defer(...args: any[]): any;
    function delay(...args: any[]): any;
    function difference(...args: any[]): any;
    function differenceBy(...args: any[]): any;
    function differenceWith(...args: any[]): any;
    function divide(value: any, other: any): any;
    function drop(array: any, n: any, guard: any): any;
    function dropRight(array: any, n: any, guard: any): any;
    function dropRightWhile(array: any, predicate: any): any;
    function dropWhile(array: any, predicate: any): any;
    function each(collection: any, iteratee: any): any;
    function eachRight(collection: any, iteratee: any): any;
    function endsWith(string: any, target: any, position: any): any;
    function entries(object: any): any;
    function entriesIn(object: any): any;
    function eq(value: any, other: any): any;
    function escape(string: any): any;
    function escapeRegExp(string: any): any;
    function every(collection: any, predicate: any, guard: any): any;
    function extend(...args: any[]): any;
    function extendWith(...args: any[]): any;
    function fill(array: any, value: any, start: any, end: any): any;
    function filter(collection: any, predicate: any): any;
    function find(collection: any, predicate: any, fromIndex: any): any;
    function findIndex(array: any, predicate: any, fromIndex: any): any;
    function findKey(object: any, predicate: any): any;
    function findLast(collection: any, predicate: any, fromIndex: any): any;
    function findLastIndex(array: any, predicate: any, fromIndex: any): any;
    function findLastKey(object: any, predicate: any): any;
    function first(array: any): any;
    function flatMap(collection: any, iteratee: any): any;
    function flatMapDeep(collection: any, iteratee: any): any;
    function flatMapDepth(collection: any, iteratee: any, depth: any): any;
    function flatten(array: any): any;
    function flattenDeep(array: any): any;
    function flattenDepth(array: any, depth: any): any;
    function flip(func: any): any;
    function floor(number: any, precision: any): any;
    function flow(...args: any[]): any;
    function flowRight(...args: any[]): any;
    function forEach(collection: any, iteratee: any): any;
    function forEachRight(collection: any, iteratee: any): any;
    function forIn(object: any, iteratee: any): any;
    function forInRight(object: any, iteratee: any): any;
    function forOwn(object: any, iteratee: any): any;
    function forOwnRight(object: any, iteratee: any): any;
    function fromPairs(pairs: any): any;
    function functions(object: any): any;
    function functionsIn(object: any): any;
    function get(object: any, path: any, defaultValue: any): any;
    function groupBy(collection: any, iteratee: any): any;
    function gt(value: any, other: any): any;
    function gte(value: any, other: any): any;
    function has(object: any, path: any): any;
    function hasIn(object: any, path: any): any;
    function head(array: any): any;
    function identity(value: any): any;
    function inRange(number: any, start: any, end: any): any;
    function includes(collection: any, value: any, fromIndex: any, guard: any): any;
    function indexOf(array: any, value: any, fromIndex: any): any;
    function initial(array: any): any;
    function intersection(...args: any[]): any;
    function intersectionBy(...args: any[]): any;
    function intersectionWith(...args: any[]): any;
    function invert(object: any, iteratee: any): any;
    function invertBy(object: any, iteratee: any): any;
    function invoke(...args: any[]): any;
    function invokeMap(...args: any[]): any;
    function isArguments(value: any): any;
    function isArray(p0: any): any;
    function isArrayBuffer(value: any): any;
    function isArrayLike(value: any): any;
    function isArrayLikeObject(value: any): any;
    function isBoolean(value: any): any;
    function isBuffer(b: any): any;
    function isDate(value: any): any;
    function isElement(value: any): any;
    function isEmpty(value: any): any;
    function isEqual(value: any, other: any): any;
    function isEqualWith(value: any, other: any, customizer: any): any;
    function isError(value: any): any;
    function isFinite(value: any): any;
    function isFunction(value: any): any;
    function isInteger(value: any): any;
    function isLength(value: any): any;
    function isMap(value: any): any;
    function isMatch(object: any, source: any): any;
    function isMatchWith(object: any, source: any, customizer: any): any;
    function isNaN(value: any): any;
    function isNative(value: any): any;
    function isNil(value: any): any;
    function isNull(value: any): any;
    function isNumber(value: any): any;
    function isObject(value: any): any;
    function isObjectLike(value: any): any;
    function isPlainObject(value: any): any;
    function isRegExp(value: any): any;
    function isSafeInteger(value: any): any;
    function isSet(value: any): any;
    function isString(value: any): any;
    function isSymbol(value: any): any;
    function isTypedArray(value: any): any;
    function isUndefined(value: any): any;
    function isWeakMap(value: any): any;
    function isWeakSet(value: any): any;
    function iteratee(func: any): any;
    function join(array: any, separator: any): any;
    function kebabCase(string: any): any;
    function keyBy(collection: any, iteratee: any): any;
    function keys(object: any): any;
    function keysIn(object: any): any;
    function last(array: any): any;
    function lastIndexOf(array: any, value: any, fromIndex: any): any;
    function lowerCase(string: any): any;
    function lowerFirst(string: any): any;
    function lt(value: any, other: any): any;
    function lte(value: any, other: any): any;
    function map(collection: any, iteratee: any): any;
    function mapKeys(object: any, iteratee: any): any;
    function mapValues(object: any, iteratee: any): any;
    function matches(source: any): any;
    function matchesProperty(path: any, srcValue: any): any;
    function max(array: any): any;
    function maxBy(array: any, iteratee: any): any;
    function mean(array: any): any;
    function meanBy(array: any, iteratee: any): any;
    function memoize(func: any, resolver: any, ...args: any[]): any;
    function merge(...args: any[]): any;
    function mergeWith(...args: any[]): any;
    function method(...args: any[]): any;
    function methodOf(...args: any[]): any;
    function min(array: any): any;
    function minBy(array: any, iteratee: any): any;
    function mixin(object: any, source: any, options: any, ...args: any[]): any;
    function multiply(value: any, other: any): any;
    function negate(predicate: any, ...args: any[]): any;
    function noConflict(): any;
    function noop(): void;
    function now(): any;
    function nth(array: any, n: any): any;
    function nthArg(n: any): any;
    function omit(...args: any[]): any;
    function omitBy(object: any, predicate: any): any;
    function once(func: any): any;
    function orderBy(collection: any, iteratees: any, orders: any, guard: any): any;
    function over(...args: any[]): any;
    function overArgs(...args: any[]): any;
    function overEvery(...args: any[]): any;
    function overSome(...args: any[]): any;
    function pad(string: any, length: any, chars: any): any;
    function padEnd(string: any, length: any, chars: any): any;
    function padStart(string: any, length: any, chars: any): any;
    function parseInt(string: any, radix: any, guard: any): any;
    function partial(...args: any[]): any;
    function partialRight(...args: any[]): any;
    function partition(collection: any, iteratee: any): any;
    function pick(...args: any[]): any;
    function pickBy(object: any, predicate: any): any;
    function property(path: any): any;
    function propertyOf(object: any): any;
    function pull(...args: any[]): any;
    function pullAll(array: any, values: any): any;
    function pullAllBy(array: any, values: any, iteratee: any): any;
    function pullAllWith(array: any, values: any, comparator: any): any;
    function pullAt(...args: any[]): any;
    function random(lower: any, upper: any, floating: any): any;
    function range(start: any, end: any, step: any): any;
    function rangeRight(start: any, end: any, step: any): any;
    function rearg(...args: any[]): any;
    function reduce(collection: any, iteratee: any, accumulator: any, ...args: any[]): any;
    function reduceRight(collection: any, iteratee: any, accumulator: any, ...args: any[]): any;
    function reject(collection: any, predicate: any): any;
    function remove(array: any, predicate: any): any;
    function repeat(string: any, n: any, guard: any): any;
    function replace(...args: any[]): any;
    function rest(func: any, start: any): any;
    function result(object: any, path: any, defaultValue: any): any;
    function reverse(array: any): any;
    function round(number: any, precision: any): any;
    function runInContext(context: any, ...args: any[]): any;
    function sample(collection: any): any;
    function sampleSize(collection: any, n: any, guard: any): any;
    function set(object: any, path: any, value: any): any;
    function setWith(object: any, path: any, value: any, customizer: any): any;
    function shuffle(collection: any): any;
    function size(collection: any): any;
    function slice(array: any, start: any, end: any): any;
    function snakeCase(string: any): any;
    function some(collection: any, predicate: any, guard: any): any;
    function sortBy(...args: any[]): any;
    function sortedIndex(array: any, value: any): any;
    function sortedIndexBy(array: any, value: any, iteratee: any): any;
    function sortedIndexOf(array: any, value: any): any;
    function sortedLastIndex(array: any, value: any): any;
    function sortedLastIndexBy(array: any, value: any, iteratee: any): any;
    function sortedLastIndexOf(array: any, value: any): any;
    function sortedUniq(array: any): any;
    function sortedUniqBy(array: any, iteratee: any): any;
    function split(string: any, separator: any, limit: any): any;
    function spread(func: any, start: any): any;
    function startCase(string: any): any;
    function startsWith(string: any, target: any, position: any): any;
    function stubArray(): any;
    function stubFalse(): any;
    function stubObject(): any;
    function stubString(): any;
    function stubTrue(): any;
    function subtract(value: any, other: any): any;
    function sum(array: any): any;
    function sumBy(array: any, iteratee: any): any;
    function tail(array: any): any;
    function take(array: any, n: any, guard: any): any;
    function takeRight(array: any, n: any, guard: any): any;
    function takeRightWhile(array: any, predicate: any): any;
    function takeWhile(array: any, predicate: any): any;
    function tap(value: any, interceptor: any): any;
    function template(string: any, options: any, guard: any): any;
    const templateSettings: {
        escape: RegExp;
        evaluate: RegExp;
        imports: {
        };
        interpolate: RegExp;
        variable: string;
    };
    function throttle(func: any, wait: any, options: any): any;
    function thru(value: any, interceptor: any): any;
    function times(n: any, iteratee: any): any;
    function toArray(value: any): any;
    function toFinite(value: any): any;
    function toInteger(value: any): any;
    function toLength(value: any): any;
    function toLower(value: any): any;
    function toNumber(value: any): any;
    function toPairs(object: any): any;
    function toPairsIn(object: any): any;
    function toPath(value: any): any;
    function toPlainObject(value: any): any;
    function toSafeInteger(value: any): any;
    function toString(value: any): any;
    function toUpper(value: any): any;
    function transform(object: any, iteratee: any, accumulator: any): any;
    function trim(string: any, chars: any, guard: any): any;
    function trimEnd(string: any, chars: any, guard: any): any;
    function trimStart(string: any, chars: any, guard: any): any;
    function truncate(string: any, options: any): any;
    function unary(func: any): any;
    function unescape(string: any): any;
    function union(...args: any[]): any;
    function unionBy(...args: any[]): any;
    function unionWith(...args: any[]): any;
    function uniq(array: any): any;
    function uniqBy(array: any, iteratee: any): any;
    function uniqWith(array: any, comparator: any): any;
    function uniqueId(prefix: any): any;
    function unset(object: any, path: any): any;
    function unzip(array: any): any;
    function unzipWith(array: any, iteratee: any): any;
    function update(object: any, path: any, updater: any): any;
    function updateWith(object: any, path: any, updater: any, customizer: any): any;
    function upperCase(string: any): any;
    function upperFirst(string: any): any;
    function values(object: any): any;
    function valuesIn(object: any): any;
    function without(...args: any[]): any;
    function words(string: any, pattern: any, guard: any): any;
    function wrap(value: any, wrapper: any): any;
    function xor(...args: any[]): any;
    function xorBy(...args: any[]): any;
    function xorWith(...args: any[]): any;
    function zip(...args: any[]): any;
    function zipObject(props: any, values: any): any;
    function zipObjectDeep(props: any, values: any): any;
    function zipWith(...args: any[]): any;
}
